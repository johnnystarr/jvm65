plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'com.adarshr.test-logger' version '3.0.0'
    id "org.sonarqube" version "3.1.1"
    id 'application'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
}

ext {
    buildArchivaUrl = "http://192.168.1.128:8080/repository/snapshots/"
}

group = 'io.johnnystarr'
version = '0.1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

application {
    mainClassName = 'io.johnnystarr.jvm65.MainKt'
}

jar {
    manifest {
        attributes("Main-Class": "io.johnnystarr.jvm65.MainKt")
    }
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

publishing {
    repositories {
        maven {
            url buildArchivaUrl
            credentials {
                username "admin"
                password "$System.env.ARCHIVA_PASSWORD"
            }
        }
    }
}

task javadocJar(type: Jar) {
    from javadoc
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name rootProject.name
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A JVM targeted 6502 simulator written in Kotlin.'

                scm {
                    connection 'https://github.com/johnnystarr/jvm65.git'
                    developerConnection 'https://github.com/johnnystarr/jvm65.git'
                    url 'https://github.com/johnnystarr/jvm65'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'johnnystarr'
                        name 'Johnny Starr'
                        email 'johnnystarr@gmail.com'
                    }
                }
            }
        }
    }
}