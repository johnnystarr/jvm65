
plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.4.32'
    id 'org.jetbrains.dokka' version '1.4.32'
    id 'com.adarshr.test-logger' version '3.0.0'
    id "org.sonarqube" version "3.1.1"
    id 'java-library'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
}

group = 'io.johnnystarr'
version = '0.1.5'

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'com.google.guava:guava:30.0-jre'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    api 'org.apache.commons:commons-math3:3.6.1'
    dokkaHtmlPlugin 'org.jetbrains.dokka:kotlin-as-java-plugin:1.4.30'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
    }
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

compileKotlin {
    kotlinOptions.jvmTarget = '11'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '11'
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': rootProject.name, 'Implementation-Version': version)
    }
    baseName = rootProject.name
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

task renameDokka {
    doLast {
        exec {
            commandLine "mv", "build/dokka", "build/docs"
        }
    }
}

tasks.named('dokkaJavadoc') {
    finalizedBy('renameDokka')
}

tasks.named('javadocJar') {
    dependsOn('dokkaJavadoc')
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name rootProject.name
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'A JVM targeted 6502 simulator written in Kotlin.'
                url 'https://johnnystarr.io/jvm65'

                scm {
                    connection 'https://github.com/johnnystarr/jvm65.git'
                    developerConnection 'https://github.com/johnnystarr/jvm65.git'
                    url 'https://github.com/johnnystarr/jvm65'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'johnnystarr'
                        name 'Johnny Starr'
                        email 'johnnystarr@gmail.com'
                    }
                }
            }
        }
    }
}